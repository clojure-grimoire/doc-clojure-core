{:added "1.0", :ns "clojure.core", :name "deref", :file "clojure/core.clj", :static true, :type :fn, :src "(defn deref\n  \"Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?.\"\n  {:added \"1.0\"\n   :static true}\n  ([ref] (if (instance? clojure.lang.IDeref ref)\n           (.deref ^clojure.lang.IDeref ref)\n           (deref-future ref)))\n  ([ref timeout-ms timeout-val]\n     (if (instance? clojure.lang.IBlockingDeref ref)\n       (.deref ^clojure.lang.IBlockingDeref ref timeout-ms timeout-val)\n       (deref-future ref timeout-ms timeout-val))))", :column 1, :line 2192, :arglists ([ref] [ref timeout-ms timeout-val]), :doc "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?."}