{:added "1.0", :ns "clojure.core", :name "=", :file "clojure/core.clj", :type :fn, :src "(defn =\n  \"Equality. Returns true if x equals y, false if not. Same as\n  Java x.equals(y) except it also works for nil, and compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define equals() (and thus =) as a value, not an identity,\n  comparison.\"\n  {:inline (fn [x y] `(. clojure.lang.Util equiv ~x ~y))\n   :inline-arities #{2}\n   :added \"1.0\"}\n  ([x] true)\n  ([x y] (clojure.lang.Util/equiv x y))\n  ([x y & more]\n   (if (clojure.lang.Util/equiv x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (clojure.lang.Util/equiv y (first more)))\n     false)))", :column 1, :line 748, :arglists ([x] [x y] [x y & more]), :doc "Equality. Returns true if x equals y, false if not. Same as\n  Java x.equals(y) except it also works for nil, and compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define equals() (and thus =) as a value, not an identity,\n  comparison."}