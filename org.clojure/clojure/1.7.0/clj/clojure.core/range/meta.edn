{:added "1.0", :ns "clojure.core", :name "range", :file "clojure/core.clj", :static true, :type :fn, :src "(defn range\n  \"Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list.\"\n  {:added \"1.0\"\n   :static true}\n  ([]\n   (iterate inc' 0))\n  ([end]\n   (if (instance? Long end)\n     (clojure.lang.LongRange/create end)\n     (clojure.lang.Range/create end)))\n  ([start end]\n   (if (and (instance? Long start) (instance? Long end))\n     (clojure.lang.LongRange/create start end)\n     (clojure.lang.Range/create start end)))\n  ([start end step]\n   (if (and (instance? Long start) (instance? Long end) (instance? Long step))\n     (clojure.lang.LongRange/create start end step)\n     (clojure.lang.Range/create start end step))))", :column 1, :line 2888, :arglists ([] [end] [start end] [start end step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list."}