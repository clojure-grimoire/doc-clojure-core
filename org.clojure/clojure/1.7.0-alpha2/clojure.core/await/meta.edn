{:added "1.0", :ns "clojure.core", :name "await", :file "clojure/core.clj", :static true, :type :fn, :src "(defn await\n  \"Blocks the current thread (indefinitely!) until all actions\n  dispatched thus far, from this thread or agent, to the agent(s) have\n  occurred.  Will block on failed agents.  Will never return if\n  a failed agent is restarted with :clear-actions true.\"\n  {:added \"1.0\"\n   :static true}\n  [& agents]\n  (io! \"await in transaction\"\n    (when *agent*\n      (throw (new Exception \"Can't await in agent action\")))\n    (let [latch (new java.util.concurrent.CountDownLatch (count agents))\n          count-down (fn [agent] (. latch (countDown)) agent)]\n      (doseq [agent agents]\n        (send agent count-down))\n      (. latch (await)))))", :column 1, :line 3124, :arglists ([& agents]), :doc "Blocks the current thread (indefinitely!) until all actions\n  dispatched thus far, from this thread or agent, to the agent(s) have\n  occurred.  Will block on failed agents.  Will never return if\n  a failed agent is restarted with :clear-actions true."}