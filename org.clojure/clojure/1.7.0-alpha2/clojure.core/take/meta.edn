{:added "1.0", :ns "clojure.core", :name "take", :file "clojure/core.clj", :static true, :type :fn, :src "(defn take\n  \"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.\"\n  {:added \"1.0\"\n   :static true}\n  ([n]\n     (fn [f1]\n       (let [nv (volatile! n)]\n         (fn\n           ([] (f1))\n           ([result] (f1 result))\n           ([result input]\n              (let [n @nv\n                    nn (vswap! nv dec)\n                    result (if (pos? n)\n                             (f1 result input)\n                             result)]\n                (if (not (pos? nn))\n                  (reduced result)\n                  result)))))))\n  ([n coll]\n     (lazy-seq\n      (when (pos? n) \n        (when-let [s (seq coll)]\n          (cons (first s) (take (dec n) (rest s))))))))", :column 1, :line 2707, :arglists ([n] [n coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided."}