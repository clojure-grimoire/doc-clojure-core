{:type :fn, :src "(deftype Cat [cnt left right]\n  clojure.lang.Counted\n  (count [_] cnt)\n\n  clojure.lang.Seqable\n  (seq [_] (concat (seq left) (seq right)))\n\n  clojure.core.protocols/CollReduce\n  (coll-reduce [this f1] (clojure.core.protocols/coll-reduce this f1 (f1)))\n  (coll-reduce\n   [_  f1 init]\n   (clojure.core.protocols/coll-reduce\n    right f1\n    (clojure.core.protocols/coll-reduce left f1 init)))\n\n  CollFold\n  (coll-fold\n   [_ n combinef reducef]\n   (fjinvoke\n    (fn []\n      (let [rt (fjfork (fjtask #(coll-fold right n combinef reducef)))]\n        (combinef\n         (coll-fold left n combinef reducef)\n         (fjjoin rt)))))))", :ns "clojure.core.reducers", :name "->Cat", :file "clojure/core/reducers.clj", :column 1, :line 263, :arglists ([cnt left right]), :doc "Positional factory function for class clojure.core.reducers.Cat."}