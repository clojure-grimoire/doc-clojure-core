{:added "1.1", :ns "clojure.core", :name "promise", :file "clojure/core.clj", :static true, :type :fn, :src "(defn promise\n  \"Returns a promise object that can be read with deref/@, and set,\n  once only, with deliver. Calls to deref/@ prior to delivery will\n  block, unless the variant of deref with timeout is used. All\n  subsequent derefs will return the same delivered value without\n  blocking. See also - realized?.\"\n  {:added \"1.1\"\n   :static true}\n  []\n  (let [d (java.util.concurrent.CountDownLatch. 1)\n        v (atom d)]\n    (reify \n     clojure.lang.IDeref\n       (deref [_] (.await d) @v)\n     clojure.lang.IBlockingDeref\n       (deref\n        [_ timeout-ms timeout-val]\n        (if (.await d timeout-ms java.util.concurrent.TimeUnit/MILLISECONDS)\n          @v\n          timeout-val))  \n     clojure.lang.IPending\n      (isRealized [this]\n       (zero? (.getCount d)))\n     clojure.lang.IFn\n     (invoke\n      [this x]\n      (when (and (pos? (.getCount d))\n                 (compare-and-set! v d x))\n        (.countDown d)\n        this)))))", :column 1, :line 6733, :arglists ([]), :doc "Returns a promise object that can be read with deref/@, and set,\n  once only, with deliver. Calls to deref/@ prior to delivery will\n  block, unless the variant of deref with timeout is used. All\n  subsequent derefs will return the same delivered value without\n  blocking. See also - realized?."}