{:added "1.5", :ns #object[clojure.lang.Namespace 0x4528486c "clojure.core.reducers"], :name "cat", :file "clojure/core/reducers.clj", :type :fn, :src "(defn cat\n  \"A high-performance combining fn that yields the catenation of the\n  reduced values. The result is reducible, foldable, seqable and\n  counted, providing the identity collections are reducible, seqable\n  and counted. The single argument version will build a combining fn\n  with the supplied identity constructor. Tests for identity\n  with (zero? (count x)). See also foldcat.\"\n  {:added \"1.5\"}\n  ([] (java.util.ArrayList.))\n  ([ctor]\n     (fn\n       ([] (ctor))\n       ([left right] (cat left right))))\n  ([left right]\n     (cond\n      (zero? (count left)) right\n      (zero? (count right)) left\n      :else\n      (Cat. (+ (count left) (count right)) left right))))", :column 1, :line 288, :arglists ([] [ctor] [left right]), :doc "A high-performance combining fn that yields the catenation of the\n  reduced values. The result is reducible, foldable, seqable and\n  counted, providing the identity collections are reducible, seqable\n  and counted. The single argument version will build a combining fn\n  with the supplied identity constructor. Tests for identity\n  with (zero? (count x)). See also foldcat.", :namespace "clojure.core.reducers"}