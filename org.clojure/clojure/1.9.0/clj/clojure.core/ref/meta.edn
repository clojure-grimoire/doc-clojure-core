{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "ref", :file "clojure/core.clj", :static true, :type :fn, :src "(defn ref\n  \"Creates and returns a Ref with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :min-history (default 0)\n  :max-history (default 10)\n\n  If metadata-map is supplied, it will become the metadata on the\n  ref. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception. validate-fn will be called on\n  transaction commit, when all refs have their final values.\n\n  Normally refs accumulate history dynamically as needed to deal with\n  read demands. If you know in advance you will need history you can\n  set :min-history to ensure it will be available when first needed (instead\n  of after a read fault). History is limited, and the limit can be set\n  with :max-history.\"\n  {:added \"1.0\"\n   :static true\n   }\n  ([x] (new clojure.lang.Ref x))\n  ([x & options] \n   (let [r  ^clojure.lang.Ref (setup-reference (ref x) options)\n         opts (apply hash-map options)]\n    (when (:max-history opts)\n      (.setMaxHistory r (:max-history opts)))\n    (when (:min-history opts)\n      (.setMinHistory r (:min-history opts)))\n    r)))", :column 1, :line 2254, :arglists ([x] [x & options]), :doc "Creates and returns a Ref with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :min-history (default 0)\n  :max-history (default 10)\n\n  If metadata-map is supplied, it will become the metadata on the\n  ref. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception. validate-fn will be called on\n  transaction commit, when all refs have their final values.\n\n  Normally refs accumulate history dynamically as needed to deal with\n  read demands. If you know in advance you will need history you can\n  set :min-history to ensure it will be available when first needed (instead\n  of after a read fault). History is limited, and the limit can be set\n  with :max-history.", :namespace "clojure.core"}