{:added "1.5", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "some->", :file "clojure/core.clj", :type :macro, :src "(defmacro some->\n  \"When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc\"\n  {:added \"1.5\"}\n  [expr & forms]\n  (let [g (gensym)\n        steps (map (fn [step] `(if (nil? ~g) nil (-> ~g ~step)))\n                   forms)]\n    `(let [~g ~expr\n           ~@(interleave (repeat g) (butlast steps))]\n       ~(if (empty? steps)\n          g\n          (last steps)))))", :column 1, :line 7504, :macro true, :arglists ([expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc", :namespace "clojure.core"}