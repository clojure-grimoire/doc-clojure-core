{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "memoize", :file "clojure/core.clj", :static true, :type :fn, :src "(defn memoize\n  \"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.\"\n  {:added \"1.0\"\n   :static true}\n  [f]\n  (let [mem (atom {})]\n    (fn [& args]\n      (if-let [e (find @mem args)]\n        (val e)\n        (let [ret (apply f args)]\n          (swap! mem assoc args ret)\n          ret)))))", :column 1, :line 6263, :arglists ([f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :namespace "clojure.core"}