{:added "1.7", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "Throwable->map", :file "clojure/core_print.clj", :type :fn, :src "(defn Throwable->map\n  \"Constructs a data representation for a Throwable.\"\n  {:added \"1.7\"}\n  [^Throwable o]\n  (let [base (fn [^Throwable t]\n               (merge {:type (symbol (.getName (class t)))\n                       :message (.getLocalizedMessage t)}\n                 (when-let [ed (ex-data t)]\n                   {:data ed})\n                 (let [st (.getStackTrace t)]\n                   (when (pos? (alength st))\n                     {:at (StackTraceElement->vec (aget st 0))}))))\n        via (loop [via [], ^Throwable t o]\n              (if t\n                (recur (conj via t) (.getCause t))\n                via))\n        ^Throwable root (peek via)\n        m {:cause (.getLocalizedMessage root)\n           :via (vec (map base via))\n           :trace (vec (map StackTraceElement->vec\n                            (.getStackTrace ^Throwable (or root o))))}\n        data (ex-data root)]\n    (if data\n      (assoc m :data data)\n      m)))", :column 1, :line 471, :arglists ([o]), :doc "Constructs a data representation for a Throwable.", :namespace "clojure.core"}