{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "compare", :file "clojure/core.clj", :type :fn, :src "(defn compare\n  \"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable\"\n  {\n   :inline (fn [x y] `(. clojure.lang.Util compare ~x ~y))\n   :added \"1.0\"}\n  [x y] (. clojure.lang.Util (compare x y)))", :column 1, :line 823, :arglists ([x y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable", :namespace "clojure.core"}