{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "with-open", :file "clojure/core.clj", :type :macro, :src "(defmacro with-open\n  \"bindings => [name init ...]\n\n  Evaluates body in a try expression with names bound to the values\n  of the inits, and a finally clause that calls (.close name) on each\n  name in reverse order.\"\n  {:added \"1.0\"}\n  [bindings & body]\n  (assert-args\n     (vector? bindings) \"a vector for its binding\"\n     (even? (count bindings)) \"an even number of forms in binding vector\")\n  (cond\n    (= (count bindings) 0) `(do ~@body)\n    (symbol? (bindings 0)) `(let ~(subvec bindings 0 2)\n                              (try\n                                (with-open ~(subvec bindings 2) ~@body)\n                                (finally\n                                  (. ~(bindings 0) close))))\n    :else (throw (IllegalArgumentException.\n                   \"with-open only allows Symbols in bindings\"))))", :column 1, :line 3797, :macro true, :arglists ([bindings & body]), :doc "bindings => [name init ...]\n\n  Evaluates body in a try expression with names bound to the values\n  of the inits, and a finally clause that calls (.close name) on each\n  name in reverse order.", :namespace "clojure.core"}