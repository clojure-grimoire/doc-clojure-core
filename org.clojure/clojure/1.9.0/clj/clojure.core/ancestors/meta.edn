{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "ancestors", :file "clojure/core.clj", :type :fn, :src "(defn ancestors\n  \"Returns the immediate and indirect parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  {:added \"1.0\"}\n  ([tag] (ancestors global-hierarchy tag))\n  ([h tag] (not-empty\n            (let [ta (get (:ancestors h) tag)]\n              (if (class? tag)\n                (let [superclasses (set (supers tag))]\n                  (reduce1 into1 superclasses\n                    (cons ta\n                          (map #(get (:ancestors h) %) superclasses))))\n                ta)))))", :column 1, :line 5538, :arglists ([tag] [h tag]), :doc "Returns the immediate and indirect parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :namespace "clojure.core"}