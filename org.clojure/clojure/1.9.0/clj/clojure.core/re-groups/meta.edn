{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "re-groups", :file "clojure/core.clj", :static true, :type :fn, :src "(defn re-groups\n  \"Returns the groups from the most recent match/find. If there are no\n  nested groups, returns a string of the entire match. If there are\n  nested groups, returns a vector of the groups, the first element\n  being the entire match.\"\n  {:added \"1.0\"\n   :static true}\n  [^java.util.regex.Matcher m]\n    (let [gc  (. m (groupCount))]\n      (if (zero? gc)\n        (. m (group))\n        (loop [ret [] c 0]\n          (if (<= c gc)\n            (recur (conj ret (. m (group c))) (inc c))\n            ret)))))", :column 1, :line 4798, :arglists ([m]), :doc "Returns the groups from the most recent match/find. If there are no\n  nested groups, returns a string of the entire match. If there are\n  nested groups, returns a vector of the groups, the first element\n  being the entire match.", :namespace "clojure.core"}