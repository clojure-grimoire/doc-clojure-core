{:added "1.2", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "partition-by", :file "clojure/core.clj", :static true, :type :fn, :src "(defn partition-by\n  \"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.\"\n  {:added \"1.2\"\n   :static true}\n  ([f]\n  (fn [rf]\n    (let [a (java.util.ArrayList.)\n          pv (volatile! ::none)]\n      (fn\n        ([] (rf))\n        ([result]\n           (let [result (if (.isEmpty a)\n                          result\n                          (let [v (vec (.toArray a))]\n                            ;;clear first!\n                            (.clear a)\n                            (unreduced (rf result v))))]\n             (rf result)))\n        ([result input]\n           (let [pval @pv\n                 val (f input)]\n             (vreset! pv val)\n             (if (or (identical? pval ::none)\n                     (= val pval))\n               (do\n                 (.add a input)\n                 result)\n               (let [v (vec (.toArray a))]\n                 (.clear a)\n                 (let [ret (rf result v)]\n                   (when-not (reduced? ret)\n                     (.add a input))\n                   ret)))))))))\n  ([f coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (let [fst (first s)\n              fv (f fst)\n              run (cons fst (take-while #(= fv (f %)) (next s)))]\n          (cons run (partition-by f (seq (drop (count run) s)))))))))", :column 1, :line 7080, :arglists ([f] [f coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :namespace "clojure.core"}