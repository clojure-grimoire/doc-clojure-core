{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "rsubseq", :file "clojure/core.clj", :static true, :type :fn, :src "(defn rsubseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  {:added \"1.0\"\n   :static true}\n  ([^clojure.lang.Sorted sc test key]\n   (let [include (mk-bound-fn sc test key)]\n     (if (#{< <=} test)\n       (when-let [[e :as s] (. sc seqFrom key false)]\n         (if (include e) s (next s)))\n       (take-while include (. sc seq false)))))\n  ([^clojure.lang.Sorted sc start-test start-key end-test end-key]\n   (when-let [[e :as s] (. sc seqFrom end-key false)]\n     (take-while (mk-bound-fn sc start-test start-key)\n                 (if ((mk-bound-fn sc end-test end-key) e) s (next s))))))", :column 1, :line 5066, :arglists ([sc test key] [sc start-test start-key end-test end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :namespace "clojure.core"}