{:added "1.0", :ns #object[clojure.lang.Namespace 0x264888e7 "clojure.core"], :name "resultset-seq", :file "clojure/core.clj", :type :fn, :src "(defn resultset-seq\n  \"Creates and returns a lazy sequence of structmaps corresponding to\n  the rows in the java.sql.ResultSet rs\"\n  {:added \"1.0\"}\n  [^java.sql.ResultSet rs]\n    (let [rsmeta (. rs (getMetaData))\n          idxs (range 1 (inc (. rsmeta (getColumnCount))))\n          keys (map (comp keyword #(.toLowerCase ^String %))\n                    (map (fn [i] (. rsmeta (getColumnLabel i))) idxs))\n          check-keys\n                (or (apply distinct? keys)\n                    (throw (Exception. \"ResultSet must have unique column labels\")))\n          row-struct (apply create-struct keys)\n          row-values (fn [] (map (fn [^Integer i] (. rs (getObject i))) idxs))\n          rows (fn thisfn []\n                 (when (. rs (next))\n                   (cons (apply struct row-struct (row-values)) (lazy-seq (thisfn)))))]\n      (rows)))", :column 1, :line 5642, :arglists ([rs]), :doc "Creates and returns a lazy sequence of structmaps corresponding to\n  the rows in the java.sql.ResultSet rs", :namespace "clojure.core"}