{:line 26, :column 1, :file "clojure/xml.clj", :name "content-handler", :ns #object[clojure.lang.Namespace 0x3468198d "clojure.xml"], :src "(def content-handler\n  (let [push-content (fn [e c]\n                       (assoc e :content (conj (or (:content e) []) c)))\n        push-chars (fn []\n                     (when (and (= *state* :chars)\n                                (some (complement #(Character/isWhitespace (char %))) (str *sb*)))\n                       (set! *current* (push-content *current* (str *sb*)))))]\n    (new clojure.lang.XMLHandler\n         (proxy [ContentHandler] []\n           (startElement [uri local-name q-name ^Attributes atts]\n             (let [attrs (fn [ret i]\n                           (if (neg? i)\n                             ret\n                             (recur (assoc ret\n                                           (clojure.lang.Keyword/intern (symbol (.getQName atts i)))\n                                           (.getValue atts (int i)))\n                                    (dec i))))\n                   e (struct element\n                             (. clojure.lang.Keyword (intern (symbol q-name)))\n                             (when (pos? (.getLength atts))\n                               (attrs {} (dec (.getLength atts)))))]\n               (push-chars)\n               (set! *stack* (conj *stack* *current*))\n               (set! *current* e)\n               (set! *state* :element))\n             nil)\n           (endElement [uri local-name q-name]\n             (push-chars)\n             (set! *current* (push-content (peek *stack*) *current*))\n             (set! *stack* (pop *stack*))\n             (set! *state* :between)\n             nil)\n           (characters [^chars ch start length]\n             (when-not (= *state* :chars)\n               (set! *sb* (new StringBuilder)))\n             (let [^StringBuilder sb *sb*]\n               (.append sb ch (int start) (int length))\n               (set! *state* :chars))\n             nil)\n           (setDocumentLocator [locator])\n           (startDocument [])\n           (endDocument [])\n           (startPrefixMapping [prefix uri])\n           (endPrefixMapping [prefix])\n           (ignorableWhitespace [ch start length])\n           (processingInstruction [target data])\n           (skippedEntity [name])\n           ))))", :type :var, :namespace "clojure.xml"}