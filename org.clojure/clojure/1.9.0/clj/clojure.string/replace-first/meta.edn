{:added "1.2", :ns #object[clojure.lang.Namespace 0xfd0515a "clojure.string"], :name "replace-first", :file "clojure/string.clj", :type :fn, :src "(defn ^String replace-first\n  \"Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   char / char\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.  If you wish your replacement\n   string r to be used literally, use (re-quote-replacement r) as the\n   replacement argument.  See also documentation for\n   java.util.regex.Matcher's appendReplacement method.\n\n   Example:\n   (clojure.string/replace-first \\\"swap first two words\\\"\n                                 #\\\"(\\\\w+)(\\\\s+)(\\\\w+)\\\" \\\"$3$2$1\\\")\n   -> \\\"first swap two words\\\"\"\n  {:added \"1.2\"}\n  [^CharSequence s match replacement]\n  (let [s (.toString s)]\n    (cond\n     (instance? Character match)\n     (replace-first-char s match replacement)\n     (instance? CharSequence match)\n     (replace-first-str s (.toString ^CharSequence match)\n                        (.toString ^CharSequence replacement))\n     (instance? Pattern match)\n     (if (instance? CharSequence replacement)\n       (.replaceFirst (re-matcher ^Pattern match s)\n                      (.toString ^CharSequence replacement))\n       (replace-first-by s match replacement))\n     :else (throw (IllegalArgumentException. (str \"Invalid match arg: \" match))))))", :column 1, :line 138, :tag java.lang.String, :arglists ([s match replacement]), :doc "Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   char / char\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.  If you wish your replacement\n   string r to be used literally, use (re-quote-replacement r) as the\n   replacement argument.  See also documentation for\n   java.util.regex.Matcher's appendReplacement method.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\"", :namespace "clojure.string"}