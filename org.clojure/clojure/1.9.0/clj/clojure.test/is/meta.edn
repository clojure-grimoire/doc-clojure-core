{:added "1.1", :ns #object[clojure.lang.Namespace 0x4f0ee1eb "clojure.test"], :name "is", :file "clojure/test.clj", :type :macro, :src "(defmacro is\n  \"Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n  \n  Example: (is (= 4 (+ 2 2)) \\\"Two plus two should be 4\\\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-find) the regular expression re.\"\n  {:added \"1.1\"} \n  ([form] `(is ~form nil))\n  ([form msg] `(try-expr ~msg ~form)))", :column 1, :line 553, :macro true, :arglists ([form] [form msg]), :doc "Generic assertion macro.  'form' is any predicate test.\n  'msg' is an optional message to attach to the assertion.\n  \n  Example: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\n  Special forms:\n\n  (is (thrown? c body)) checks that an instance of c is thrown from\n  body, fails if not; then returns the thing thrown.\n\n  (is (thrown-with-msg? c re body)) checks that an instance of c is\n  thrown AND that the message on the exception matches (with\n  re-find) the regular expression re.", :namespace "clojure.test"}