{:ns #object[clojure.lang.Namespace 0xcc6c7c9 "clojure.repl"], :name "apropos", :file "clojure/repl.clj", :type :fn, :src "(defn apropos\n  \"Given a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern.\"\n  [str-or-pattern]\n  (let [matches? (if (instance? java.util.regex.Pattern str-or-pattern)\n                   #(re-find str-or-pattern (str %))\n                   #(.contains (str %) (str str-or-pattern)))]\n    (sort (mapcat (fn [ns]\n                    (let [ns-name (str ns)]\n                      (map #(symbol ns-name (str %))\n                           (filter matches? (keys (ns-publics ns))))))\n                  (all-ns)))))", :column 1, :line 182, :arglists ([str-or-pattern]), :doc "Given a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern.", :namespace "clojure.repl"}