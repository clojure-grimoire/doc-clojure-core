{:added "1.0", :ns "clojure.core", :name "set-validator!", :file "clojure/core.clj", :static true, :type :fn, :src "(defn set-validator!\n  \"Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an exception. If the current state (root\n  value if var) is not acceptable to the new validator, an exception\n  will be thrown and the validator will not be changed.\"\n  {:added \"1.0\"\n   :static true}\n  [^clojure.lang.IRef iref validator-fn] (. iref (setValidator validator-fn)))", :column 1, :line 2256, :arglists ([iref validator-fn]), :doc "Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an exception. If the current state (root\n  value if var) is not acceptable to the new validator, an exception\n  will be thrown and the validator will not be changed."}