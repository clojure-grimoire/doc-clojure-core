{:added "1.0", :ns "clojure.core", :name "reduce", :file "clojure/core.clj", :type :fn, :src "(defn reduce\n  \"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.\"\n  {:added \"1.0\"}\n  ([f coll]\n     (if (instance? clojure.lang.IReduce coll)\n       (.reduce ^clojure.lang.IReduce coll f)\n       (clojure.core.protocols/coll-reduce coll f)))\n  ([f val coll]\n     (if (instance? clojure.lang.IReduceInit coll)\n       (.reduce ^clojure.lang.IReduceInit coll f val)\n       (clojure.core.protocols/coll-reduce coll f val))))", :column 1, :line 6497, :arglists ([f coll] [f val coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called."}