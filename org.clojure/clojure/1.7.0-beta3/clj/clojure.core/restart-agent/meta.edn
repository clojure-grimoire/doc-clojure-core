{:added "1.2", :ns "clojure.core", :name "restart-agent", :file "clojure/core.clj", :static true, :type :fn, :src "(defn restart-agent\n  \"When an agent is failed, changes the agent state to new-state and\n  then un-fails the agent so that sends are allowed again.  If\n  a :clear-actions true option is given, any actions queued on the\n  agent that were being held while it was failed will be discarded,\n  otherwise those held actions will proceed.  The new-state must pass\n  the validator if any, or restart will throw an exception and the\n  agent will remain failed with its old state and error.  Watchers, if\n  any, will NOT be notified of the new state.  Throws an exception if\n  the agent is not failed.\"\n  {:added \"1.2\"\n   :static true\n   }\n  [^clojure.lang.Agent a, new-state & options]\n  (let [opts (apply hash-map options)]\n    (.restart a new-state (if (:clear-actions opts) true false))))", :column 1, :line 2061, :arglists ([a new-state & options]), :doc "When an agent is failed, changes the agent state to new-state and\n  then un-fails the agent so that sends are allowed again.  If\n  a :clear-actions true option is given, any actions queued on the\n  agent that were being held while it was failed will be discarded,\n  otherwise those held actions will proceed.  The new-state must pass\n  the validator if any, or restart will throw an exception and the\n  agent will remain failed with its old state and error.  Watchers, if\n  any, will NOT be notified of the new state.  Throws an exception if\n  the agent is not failed."}