{:added "1.0", :ns "clojure.core", :name "lazy-seq", :file "clojure/core.clj", :type :macro, :src "(defmacro lazy-seq\n  \"Takes a body of expressions that returns an ISeq or nil, and yields\n  a Seqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls. See also - realized?\"\n  {:added \"1.0\"}\n  [& body]\n  (list 'new 'clojure.lang.LazySeq (list* '^{:once true} fn* [] body)))", :column 1, :line 644, :macro true, :arglists ([& body]), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a Seqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls. See also - realized?"}