{:added "1.1", :ns "clojure.core", :name "future-call", :file "clojure/core.clj", :static true, :type :fn, :src "(defn future-call \n  \"Takes a function of no args and yields a future object that will\n  invoke the function in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant\n  of deref with timeout is used. See also - realized?.\"\n  {:added \"1.1\"\n   :static true}\n  [f]\n  (let [f (binding-conveyor-fn f)\n        fut (.submit clojure.lang.Agent/soloExecutor ^Callable f)]\n    (reify \n     clojure.lang.IDeref \n     (deref [_] (deref-future fut))\n     clojure.lang.IBlockingDeref\n     (deref\n      [_ timeout-ms timeout-val]\n      (deref-future fut timeout-ms timeout-val))\n     clojure.lang.IPending\n     (isRealized [_] (.isDone fut))\n     java.util.concurrent.Future\n      (get [_] (.get fut))\n      (get [_ timeout unit] (.get fut timeout unit))\n      (isCancelled [_] (.isCancelled fut))\n      (isDone [_] (.isDone fut))\n      (cancel [_ interrupt?] (.cancel fut interrupt?)))))", :column 1, :line 6407, :arglists ([f]), :doc "Takes a function of no args and yields a future object that will\n  invoke the function in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant\n  of deref with timeout is used. See also - realized?."}