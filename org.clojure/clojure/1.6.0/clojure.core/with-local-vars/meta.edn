{:added "1.0", :ns "clojure.core", :name "with-local-vars", :file "clojure/core.clj", :type :macro, :src "(defmacro with-local-vars\n  \"varbinding=> symbol init-expr\n\n  Executes the exprs in a context in which the symbols are bound to\n  vars with per-thread bindings to the init-exprs.  The symbols refer\n  to the var objects themselves, and must be accessed with var-get and\n  var-set\"\n  {:added \"1.0\"}\n  [name-vals-vec & body]\n  (assert-args\n     (vector? name-vals-vec) \"a vector for its binding\"\n     (even? (count name-vals-vec)) \"an even number of forms in binding vector\")\n  `(let [~@(interleave (take-nth 2 name-vals-vec)\n                       (repeat '(.. clojure.lang.Var create setDynamic)))]\n     (. clojure.lang.Var (pushThreadBindings (hash-map ~@name-vals-vec)))\n     (try\n      ~@body\n      (finally (. clojure.lang.Var (popThreadBindings))))))", :column 1, :line 3996, :macro true, :arglists ([name-vals-vec & body]), :doc "varbinding=> symbol init-expr\n\n  Executes the exprs in a context in which the symbols are bound to\n  vars with per-thread bindings to the init-exprs.  The symbols refer\n  to the var objects themselves, and must be accessed with var-get and\n  var-set"}