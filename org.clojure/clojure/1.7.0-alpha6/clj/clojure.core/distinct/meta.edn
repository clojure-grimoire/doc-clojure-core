{:added "1.0", :ns "clojure.core", :name "distinct", :file "clojure/core.clj", :static true, :type :fn, :src "(defn distinct\n  \"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.\"\n  {:added \"1.0\"\n   :static true}\n  ([]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (if (contains? @seen input)\n            result\n            (do (vswap! seen conj input)\n                (rf result input))))))))\n  ([coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n     (step coll #{}))))", :column 1, :line 4801, :arglists ([] [coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided."}