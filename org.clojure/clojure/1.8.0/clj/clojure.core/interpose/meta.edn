{:added "1.0", :ns "clojure.core", :name "interpose", :file "clojure/core.clj", :static true, :type :fn, :src "(defn interpose\n  \"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.\"\n  {:added \"1.0\"\n   :static true}\n  ([sep]\n   (fn [rf]\n     (let [started (volatile! false)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (if @started\n            (let [sepr (rf result sep)]\n              (if (reduced? sepr)\n                sepr\n                (rf sepr input)))\n            (do\n              (vreset! started true)\n              (rf result input))))))))\n  ([sep coll]\n   (drop 1 (interleave (repeat sep) coll))))", :column 1, :line 5002, :arglists ([sep] [sep coll]), :doc "Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided."}