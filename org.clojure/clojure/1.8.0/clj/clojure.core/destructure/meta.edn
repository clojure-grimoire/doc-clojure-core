{:arglists ([bindings]), :line 4259, :column 1, :file "clojure/core.clj", :name "destructure", :ns "clojure.core", :src "(defn destructure [bindings]\n  (let [bents (partition 2 bindings)\n        pb (fn pb [bvec b v]\n               (let [pvec\n                     (fn [bvec b val]\n                       (let [gvec (gensym \"vec__\")]\n                         (loop [ret (-> bvec (conj gvec) (conj val))\n                                n 0\n                                bs b\n                                seen-rest? false]\n                           (if (seq bs)\n                             (let [firstb (first bs)]\n                               (cond\n                                (= firstb '&) (recur (pb ret (second bs) (list `nthnext gvec n))\n                                                     n\n                                                     (nnext bs)\n                                                     true)\n                                (= firstb :as) (pb ret (second bs) gvec)\n                                :else (if seen-rest?\n                                        (throw (new Exception \"Unsupported binding form, only :as can follow & parameter\"))\n                                        (recur (pb ret firstb  (list `nth gvec n nil))\n                                               (inc n)\n                                               (next bs)\n                                               seen-rest?))))\n                             ret))))\n                     pmap\n                     (fn [bvec b v]\n                       (let [gmap (gensym \"map__\")\n                             gmapseq (with-meta gmap {:tag 'clojure.lang.ISeq})\n                             defaults (:or b)]\n                         (loop [ret (-> bvec (conj gmap) (conj v)\n                                        (conj gmap) (conj `(if (seq? ~gmap) (clojure.lang.PersistentHashMap/create (seq ~gmapseq)) ~gmap))\n                                        ((fn [ret]\n                                           (if (:as b)\n                                             (conj ret (:as b) gmap)\n                                             ret))))\n                                bes (reduce1\n                                     (fn [bes entry]\n                                       (reduce1 #(assoc %1 %2 ((val entry) %2))\n                                               (dissoc bes (key entry))\n                                               ((key entry) bes)))\n                                     (dissoc b :as :or)\n                                     {:keys #(if (keyword? %) % (keyword (str %))),\n                                      :strs str, :syms #(list `quote %)})]\n                           (if (seq bes)\n                             (let [bb (key (first bes))\n                                   bk (val (first bes))\n                                   bv (if (contains? defaults bb)\n                                        (list `get gmap bk (defaults bb))\n                                        (list `get gmap bk))]\n                               (recur (cond\n                                        (symbol? bb) (-> ret (conj (if (namespace bb) (symbol (name bb)) bb)) (conj bv))\n                                        (keyword? bb) (-> ret (conj (symbol (name bb)) bv))\n                                        :else (pb ret bb bv))\n                                      (next bes)))\n                             ret))))]\n                 (cond\n                   (symbol? b) (-> bvec (conj b) (conj v))\n                   (vector? b) (pvec bvec b v)\n                   (map? b) (pmap bvec b v)\n                   :else (throw (new Exception (str \"Unsupported binding form: \" b))))))\n        process-entry (fn [bvec b] (pb bvec (first b) (second b)))]\n    (if (every? symbol? (map first bents))\n      bindings\n      (reduce1 process-entry [] bents))))", :type :fn}