{:added "1.7", :ns "clojure.core", :name "Throwable->map", :file "clojure/core_print.clj", :type :fn, :src "(defn Throwable->map\n  \"Constructs a data representation for a Throwable.\"\n  {:added \"1.7\"}\n  [^Throwable o]\n  (let [base (fn [^Throwable t]\n               (let [m {:type (class t)\n                        :message (.getLocalizedMessage t)\n                        :at (get (.getStackTrace t) 0)}\n                     data (ex-data t)]\n                 (if data\n                   (assoc m :data data)\n                   m)))\n        via (loop [via [], ^Throwable t o]\n              (if t\n                (recur (conj via t) (.getCause t))\n                via))\n        ^Throwable root (peek via)\n        m {:cause (.getLocalizedMessage root)\n           :via (vec (map base via))\n           :trace (vec (.getStackTrace ^Throwable (or root o)))}\n        data (ex-data root)]\n    (if data\n      (assoc m :data data)\n      m)))", :column 1, :line 416, :arglists ([o]), :doc "Constructs a data representation for a Throwable."}