{:added "1.0", :ns "clojure.core", :name "read", :file "clojure/core.clj", :static true, :type :fn, :src "(defn read\n  \"Reads the next object from stream, which must be an instance of\n  java.io.PushbackReader or some derivee.  stream defaults to the\n  current value of *in*.\n\n  Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n  Note that read can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read\"\n  {:added \"1.0\"\n   :static true}\n  ([]\n   (read *in*))\n  ([stream]\n   (read stream true nil))\n  ([stream eof-error? eof-value]\n   (read stream eof-error? eof-value false))\n  ([stream eof-error? eof-value recursive?]\n   (. clojure.lang.LispReader (read stream (boolean eof-error?) eof-value recursive?)))\n  ([opts stream]\n   (. clojure.lang.LispReader (read stream opts))))", :column 1, :line 3639, :arglists ([] [stream] [stream eof-error? eof-value] [stream eof-error? eof-value recursive?] [opts stream]), :doc "Reads the next object from stream, which must be an instance of\n  java.io.PushbackReader or some derivee.  stream defaults to the\n  current value of *in*.\n\n  Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n  Note that read can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read"}