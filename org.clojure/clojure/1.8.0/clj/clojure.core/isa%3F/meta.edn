{:added "1.0", :ns "clojure.core", :name "isa?", :file "clojure/core.clj", :type :fn, :src "(defn isa?\n  \"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a Java type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy\"\n  {:added \"1.0\"}\n  ([child parent] (isa? global-hierarchy child parent))\n  ([h child parent]\n   (or (= child parent)\n       (and (class? parent) (class? child)\n            (. ^Class parent isAssignableFrom child))\n       (contains? ((:ancestors h) child) parent)\n       (and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))\n       (and (vector? parent) (vector? child)\n            (= (count parent) (count child))\n            (loop [ret true i 0]\n              (if (or (not ret) (= i (count parent)))\n                ret\n                (recur (isa? h (child i) (parent i)) (inc i))))))))", :column 1, :line 5353, :arglists ([child parent] [h child parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a Java type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy"}