{:added "1.2", :ns "clojure.pprint", :name "formatter", :file "clojure/pprint/cl_format.clj", :type :macro, :src "(defmacro formatter\n  \"Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format.\"\n  {:added \"1.2\"}\n  [format-in]\n  `(let [format-in# ~format-in\n         my-c-c# (var-get (get (ns-interns (the-ns 'clojure.pprint))\n                               '~'cached-compile))\n         my-e-f# (var-get (get (ns-interns (the-ns 'clojure.pprint))\n                               '~'execute-format))\n         my-i-n# (var-get (get (ns-interns (the-ns 'clojure.pprint))\n                               '~'init-navigator))\n         cf# (if (string? format-in#) (my-c-c# format-in#) format-in#)]\n     (fn [stream# & args#]\n       (let [navigator# (my-i-n# args#)]\n         (my-e-f# stream# cf# navigator#)))))", :column 1, :line 1916, :macro true, :arglists ([format-in]), :doc "Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."}