{:arglists ([opts]), :doc "Start a socket server given the specified opts:\n    :address Host or address, string, defaults to loopback address\n    :port Port, integer, required\n    :name Name, required\n    :accept Namespaced symbol of the accept function to invoke, required\n    :args Vector of args to pass to accept function\n    :bind-err Bind *err* to socket out stream?, defaults to true\n    :server-daemon Is server thread a daemon?, defaults to true\n    :client-daemon Are client threads daemons?, defaults to true\n   Returns server socket.", :line 81, :column 1, :file "clojure/core/server.clj", :name "start-server", :ns "clojure.core.server", :src "(defn start-server\n  \"Start a socket server given the specified opts:\n    :address Host or address, string, defaults to loopback address\n    :port Port, integer, required\n    :name Name, required\n    :accept Namespaced symbol of the accept function to invoke, required\n    :args Vector of args to pass to accept function\n    :bind-err Bind *err* to socket out stream?, defaults to true\n    :server-daemon Is server thread a daemon?, defaults to true\n    :client-daemon Are client threads daemons?, defaults to true\n   Returns server socket.\"\n  [opts]\n  (validate-opts opts)\n  (let [{:keys [address port name accept args bind-err server-daemon client-daemon]\n         :or {bind-err true\n              server-daemon true\n              client-daemon true}} opts\n         address (InetAddress/getByName address)  ;; nil returns loopback\n         socket (ServerSocket. port 0 address)]\n    (with-lock lock\n      (alter-var-root #'servers assoc name {:name name, :socket socket, :sessions {}}))\n    (thread\n      (str \"Clojure Server \" name) server-daemon\n      (try\n        (loop [client-counter 1]\n          (when (not (.isClosed socket))\n            (try\n              (let [conn (.accept socket)\n                    in (clojure.lang.LineNumberingPushbackReader. (java.io.InputStreamReader. (.getInputStream conn)))\n                    out (java.io.BufferedWriter. (java.io.OutputStreamWriter. (.getOutputStream conn)))\n                    client-id (str client-counter)]\n                (thread\n                  (str \"Clojure Connection \" name \" \" client-id) client-daemon\n                  (accept-connection conn name client-id in out (if bind-err out *err*) accept args)))\n              (catch SocketException _disconnect))\n            (recur (inc client-counter))))\n        (finally\n          (with-lock lock\n            (alter-var-root #'servers dissoc name)))))\n    socket))", :type :fn}