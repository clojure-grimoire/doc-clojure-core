{:added "1.3", :ns "clojure.repl", :name "pst", :file "clojure/repl.clj", :type :fn, :src "(defn pst\n  \"Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the\n  most recent repl exception (*e), and a depth of 12.\"\n  {:added \"1.3\"}\n  ([] (pst 12))\n  ([e-or-depth]\n     (if (instance? Throwable e-or-depth)\n       (pst e-or-depth 12)\n       (when-let [e *e]\n         (pst (root-cause e) e-or-depth))))\n  ([^Throwable e depth]\n     (binding [*out* *err*]\n       (println (str (-> e class .getSimpleName) \" \"\n                     (.getMessage e)\n                     (when-let [info (ex-data e)] (str \" \" (pr-str info)))))\n       (let [st (.getStackTrace e)\n             cause (.getCause e)]\n         (doseq [el (take depth\n                          (remove #(#{\"clojure.lang.RestFn\" \"clojure.lang.AFn\"} (.getClassName %))\n                                  st))]\n           (println (str \\tab (stack-element-str el))))\n         (when cause\n           (println \"Caused by:\")\n           (pst cause (min depth\n                           (+ 2 (- (count (.getStackTrace cause))\n                                   (count st))))))))))", :column 1, :line 227, :arglists ([] [e-or-depth] [e depth]), :doc "Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the\n  most recent repl exception (*e), and a depth of 12."}