{:added "1.1", :ns "clojure.core", :name "disj!", :file "clojure/core.clj", :static true, :type :fn, :src "(defn disj!\n  \"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).\"\n  {:added \"1.1\"\n   :static true}\n  ([set] set)\n  ([^clojure.lang.ITransientSet set key]\n   (. set (disjoin key)))\n  ([^clojure.lang.ITransientSet set key & ks]\n   (let [ret (. set (disjoin key))]\n     (if ks\n       (recur ret (first ks) (next ks))\n       ret))))", :column 1, :line 3262, :arglists ([set] [set key] [set key & ks]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s)."}