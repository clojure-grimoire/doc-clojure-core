{:type :fn, :src "(defn apply-template\n  \"For use in macros.  argv is an argument list, as in defn.  expr is\n  a quoted expression using the symbols in argv.  values is a sequence\n  of values to be used for the arguments.\n\n  apply-template will recursively replace argument symbols in expr\n  with their corresponding values, returning a modified expr.\n\n  Example: (apply-template '[x] '(+ x x) '[2])\n           ;=> (+ 2 2)\"\n  [argv expr values]\n  (assert (vector? argv))\n  (assert (every? symbol? argv))\n  (walk/prewalk-replace (zipmap argv values) expr))", :ns "clojure.template", :name "apply-template", :file "clojure/template.clj", :column 1, :line 30, :arglists ([argv expr values]), :doc "For use in macros.  argv is an argument list, as in defn.  expr is\n  a quoted expression using the symbols in argv.  values is a sequence\n  of values to be used for the arguments.\n\n  apply-template will recursively replace argument symbols in expr\n  with their corresponding values, returning a modified expr.\n\n  Example: (apply-template '[x] '(+ x x) '[2])\n           ;=> (+ 2 2)"}