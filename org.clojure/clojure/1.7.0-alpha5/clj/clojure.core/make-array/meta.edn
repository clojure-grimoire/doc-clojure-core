{:added "1.0", :ns "clojure.core", :name "make-array", :file "clojure/core.clj", :static true, :type :fn, :src "(defn make-array\n  \"Creates and returns an array of instances of the specified class of\n  the specified dimension(s).  Note that a class object is required.\n  Class objects can be obtained by using their imported or\n  fully-qualified name.  Class objects for the primitive types can be\n  obtained using, e.g., Integer/TYPE.\"\n  {:added \"1.0\"\n   :static true}\n  ([^Class type len]\n   (. Array (newInstance type (int len))))\n  ([^Class type dim & more-dims]\n   (let [dims (cons dim more-dims)\n         ^\"[I\" dimarray (make-array (. Integer TYPE)  (count dims))]\n     (dotimes [i (alength dimarray)]\n       (aset-int dimarray i (nth dims i)))\n     (. Array (newInstance type dimarray)))))", :column 1, :line 3816, :arglists ([type len] [type dim & more-dims]), :doc "Creates and returns an array of instances of the specified class of\n  the specified dimension(s).  Note that a class object is required.\n  Class objects can be obtained by using their imported or\n  fully-qualified name.  Class objects for the primitive types can be\n  obtained using, e.g., Integer/TYPE."}