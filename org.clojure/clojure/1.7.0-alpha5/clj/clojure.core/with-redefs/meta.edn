{:added "1.3", :ns "clojure.core", :name "with-redefs", :file "clojure/core.clj", :type :macro, :src "(defmacro with-redefs\n  \"binding => var-symbol temp-value-expr\n\n  Temporarily redefines Vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its Var.  After the body is\n  executed, the root values of all the Vars will be set back to their\n  old values.  These temporary changes will be visible in all threads.\n  Useful for mocking out functions during testing.\"\n  {:added \"1.3\"}\n  [bindings & body]\n  `(with-redefs-fn ~(zipmap (map #(list `var %) (take-nth 2 bindings))\n                            (take-nth 2 (next bindings)))\n                    (fn [] ~@body)))", :column 1, :line 7208, :macro true, :arglists ([bindings & body]), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines Vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its Var.  After the body is\n  executed, the root values of all the Vars will be set back to their\n  old values.  These temporary changes will be visible in all threads.\n  Useful for mocking out functions during testing."}