{:added "1.0", :ns "clojure.core", :name "take-while", :file "clojure/core.clj", :static true, :type :fn, :src "(defn take-while\n  \"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  {:added \"1.0\"\n   :static true}\n  ([pred]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (if (pred input)\n              (rf result input)\n              (reduced result))))))\n  ([pred coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (when (pred (first s))\n          (cons (first s) (take-while pred (rest s))))))))", :column 1, :line 2746, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."}