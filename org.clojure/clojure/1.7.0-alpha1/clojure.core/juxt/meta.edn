{:added "1.1", :ns "clojure.core", :name "juxt", :file "clojure/core.clj", :static true, :type :fn, :src "(defn juxt \n  \"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]\"\n  {:added \"1.1\"\n   :static true}\n  ([f] \n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g] \n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h] \n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce1 #(conj %1 (%2)) [] fs))\n         ([x] (reduce1 #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce1 #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce1 #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce1 #(conj %1 (apply %2 x y z args)) [] fs))))))", :column 1, :line 2424, :arglists ([f] [f g] [f g h] [f g h & fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]"}