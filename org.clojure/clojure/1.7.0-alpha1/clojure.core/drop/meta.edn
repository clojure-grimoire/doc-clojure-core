{:added "1.0", :ns "clojure.core", :name "drop", :file "clojure/core.clj", :static true, :type :fn, :src "(defn drop\n  \"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.\"\n  {:added \"1.0\"\n   :static true}\n  ([n]\n     (fn [f1]\n       (let [na (atom n)]\n         (fn\n           ([] (f1))\n           ([result] (f1 result))\n           ([result input]\n              (let [n @na]\n                (swap! na dec)\n                (if (pos? n)\n                  result\n                  (f1 result input))))))))\n  ([n coll]\n     (let [step (fn [n coll]\n                  (let [s (seq coll)]\n                    (if (and (pos? n) s)\n                      (recur (dec n) (rest s))\n                      s)))]\n       (lazy-seq (step n coll)))))", :column 1, :line 2714, :arglists ([n] [n coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided."}