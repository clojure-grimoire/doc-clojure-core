{:added "1.0", :ns "clojure.core", :name "when-first", :file "clojure/core.clj", :type :macro, :src "(defmacro when-first\n  \"bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once\"\n  {:added \"1.0\"}\n  [bindings & body]\n  (assert-args\n     (vector? bindings) \"a vector for its binding\"\n     (= 2 (count bindings)) \"exactly 2 forms in binding vector\")\n  (let [[x xs] bindings]\n    `(when-let [xs# (seq ~xs)]\n       (let [~x (first xs#)]\n           ~@body))))", :column 1, :line 4345, :macro true, :arglists ([bindings & body]), :doc "bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once"}