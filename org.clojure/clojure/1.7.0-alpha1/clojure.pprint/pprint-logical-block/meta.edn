{:added "1.2", :ns "clojure.pprint", :name "pprint-logical-block", :file "clojure/pprint/pprint_base.clj", :type :macro, :src "(defmacro pprint-logical-block \n  \"Execute the body as a pretty printing logical block with output to *out* which \nmust be a pretty printing writer. When used from pprint or cl-format, this can be \nassumed. \n\nThis function is intended for use when writing custom dispatch functions.\n\nBefore the body, the caller can optionally specify options: :prefix, :per-line-prefix, \nand :suffix.\"\n  {:added \"1.2\", :arglists '[[options* body]]}\n  [& args]\n  (let [[options body] (parse-lb-options #{:prefix :per-line-prefix :suffix} args)]\n    `(do (if (#'clojure.pprint/level-exceeded) \n           (.write ^java.io.Writer *out* \"#\")\n           (do \n             (push-thread-bindings {#'clojure.pprint/*current-level*\n                                    (inc (var-get #'clojure.pprint/*current-level*))\n                                    #'clojure.pprint/*current-length* 0})\n             (try  \n              (#'clojure.pprint/start-block *out*\n                           ~(:prefix options) ~(:per-line-prefix options) ~(:suffix options))\n              ~@body\n              (#'clojure.pprint/end-block *out*)\n              (finally \n               (pop-thread-bindings)))))\n         nil)))", :column 1, :line 302, :macro true, :arglists [[options* body]], :doc "Execute the body as a pretty printing logical block with output to *out* which \nmust be a pretty printing writer. When used from pprint or cl-format, this can be \nassumed. \n\nThis function is intended for use when writing custom dispatch functions.\n\nBefore the body, the caller can optionally specify options: :prefix, :per-line-prefix, \nand :suffix."}