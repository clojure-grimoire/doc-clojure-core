{:added "1.0", :ns "clojure.core", :name "replace", :file "clojure/core.clj", :static true, :type :fn, :src "(defn replace\n  \"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.\"\n  {:added \"1.0\"\n   :static true}\n  ([smap]\n     (map #(if-let [e (find smap %)] (val e) %)))\n  ([smap coll]\n     (if (vector? coll)\n       (reduce1 (fn [v i]\n                  (if-let [e (find smap (nth v i))]\n                    (assoc v i (val e))\n                    v))\n                coll (range (count coll)))\n       (map #(if-let [e (find smap %)] (val e) %) coll))))", :column 1, :line 4743, :arglists ([smap] [smap coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided."}