{:added "1.0", :ns "clojure.core", :name "range", :file "clojure/core.clj", :static true, :type :fn, :src "(defn range\n  \"Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list.\"\n  {:added \"1.0\"\n   :static true}\n  ([] (range 0 Double/POSITIVE_INFINITY 1))\n  ([end] (range 0 end 1))\n  ([start end] (range start end 1))\n  ([start end step]\n   (lazy-seq\n    (let [b (chunk-buffer 32)\n          comp (cond (or (zero? step) (= start end)) not=\n                     (pos? step) <\n                     (neg? step) >)]\n      (loop [i start]\n        (if (and (< (count b) 32)\n                 (comp i end))\n          (do\n            (chunk-append b i)\n            (recur (+ i step)))\n          (chunk-cons (chunk b) \n                      (when (comp i end) \n                        (range i end step)))))))))", :column 1, :line 2826, :arglists ([] [end] [start end] [start end step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list."}