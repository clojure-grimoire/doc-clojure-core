{:arglists ([format-in]), :ns "clojure.pprint", :name "formatter-out", :src "(defmacro formatter-out\n  \"Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format.\"\n  {:added \"1.2\"}\n  [format-in]\n  `(let [format-in# ~format-in\n         cf# (if (string? format-in#) (#'clojure.pprint/cached-compile format-in#) format-in#)]\n     (fn [& args#]\n       (let [navigator# (#'clojure.pprint/init-navigator args#)]\n         (#'clojure.pprint/execute-format cf# navigator#)))))", :column 1, :added "1.2", :type :macro, :doc "Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format.", :macro true, :line 1915, :file "clojure/pprint/cl_format.clj"}