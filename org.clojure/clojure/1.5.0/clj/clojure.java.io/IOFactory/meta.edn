{:type :var, :src "(defprotocol ^{:added \"1.2\"} IOFactory\n  \"Factory functions that create ready-to-use, buffered versions of\n   the various Java I/O stream types, on top of anything that can\n   be unequivocally converted to the requested kind of stream.\n\n   Common options include\n   \n     :append    true to open stream in append mode\n     :encoding  string name of encoding to use, e.g. \\\"UTF-8\\\".\n\n   Callers should generally prefer the higher level API provided by\n   reader, writer, input-stream, and output-stream.\"\n  (^{:added \"1.2\"} make-reader [x opts] \"Creates a BufferedReader. See also IOFactory docs.\")\n  (^{:added \"1.2\"} make-writer [x opts] \"Creates a BufferedWriter. See also IOFactory docs.\")\n  (^{:added \"1.2\"} make-input-stream [x opts] \"Creates a BufferedInputStream. See also IOFactory docs.\")\n  (^{:added \"1.2\"} make-output-stream [x opts] \"Creates a BufferedOutputStream. See also IOFactory docs.\"))", :doc "Factory functions that create ready-to-use, buffered versions of\n   the various Java I/O stream types, on top of anything that can\n   be unequivocally converted to the requested kind of stream.\n\n   Common options include\n   \n     :append    true to open stream in append mode\n     :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\n   Callers should generally prefer the higher level API provided by\n   reader, writer, input-stream, and output-stream.", :ns "clojure.java.io", :name "IOFactory", :column 1, :added "1.2", :line 73, :file "clojure/java/io.clj"}