{:arglists ([coll key val] [coll key val & kvs]), :ns "clojure.core", :name "assoc!", :src "(defn assoc!\n  \"Alpha - subject to change.\n  When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.\"\n  {:added \"1.1\"\n   :static true}\n  ([^clojure.lang.ITransientAssociative coll key val] (.assoc coll key val))\n  ([^clojure.lang.ITransientAssociative coll key val & kvs]\n   (let [ret (.assoc coll key val)]\n     (if kvs\n       (recur ret (first kvs) (second kvs) (nnext kvs))\n       ret))))", :column 1, :added "1.1", :static true, :type :fn, :doc "Alpha - subject to change.\n  When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :line 3007, :file "clojure/core.clj"}