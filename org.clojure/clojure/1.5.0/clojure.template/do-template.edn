{:arglists ([argv expr & values]), :ns "clojure.template", :name "do-template", :src "(defmacro do-template\n  \"Repeatedly copies expr (in a do block) for each group of arguments\n  in values.  values are automatically partitioned by the number of\n  arguments in argv, an argument vector as in defn.\n\n  Example: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n           ;=> (do (+ 4 2) (+ 5 3))\"\n  [argv expr & values]\n  (let [c (count argv)]\n    `(do ~@(map (fn [a] (apply-template argv expr a)) \n                (partition c values)))))", :column 1, :type :macro, :doc "Repeatedly copies expr (in a do block) for each group of arguments\n  in values.  values are automatically partitioned by the number of\n  arguments in argv, an argument vector as in defn.\n\n  Example: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n           ;=> (do (+ 4 2) (+ 5 3))", :macro true, :line 45, :file "clojure/template.clj"}