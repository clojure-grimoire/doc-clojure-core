{:arglists ([loc]), :ns "clojure.zip", :name "remove", :src "(defn remove\n  \"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.\"\n  {:added \"1.0\"}\n  [loc]\n    (let [[node {l :l, ppath :ppath, pnodes :pnodes, rs :r, :as path}] loc]\n      (if (nil? path)\n        (throw (new Exception \"Remove at top\"))\n        (if (pos? (count l))\n          (loop [loc (with-meta [(peek l) (assoc path :l (pop l) :changed? true)] (meta loc))]\n            (if-let [child (and (branch? loc) (down loc))]\n              (recur (rightmost child))\n              loc))\n          (with-meta [(make-node loc (peek pnodes) rs) \n                      (and ppath (assoc ppath :changed? true))]\n                     (meta loc))))))", :column 1, :added "1.0", :type :fn, :doc "Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.", :line 264, :file "clojure/zip.clj"}