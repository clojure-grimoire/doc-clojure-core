{:type :fn, :src "(defn source-fn\n  \"Returns a string of the source code for the given symbol, if it can\n  find it.  This requires that the symbol resolve to a Var defined in\n  a namespace for which the .clj is in the classpath.  Returns nil if\n  it can't find the source.  For most REPL usage, 'source' is more\n  convenient.\n\n  Example: (source-fn 'filter)\"\n  [x]\n  (when-let [v (resolve x)]\n    (when-let [filepath (:file (meta v))]\n      (when-let [strm (.getResourceAsStream (RT/baseLoader) filepath)]\n        (with-open [rdr (LineNumberReader. (InputStreamReader. strm))]\n          (dotimes [_ (dec (:line (meta v)))] (.readLine rdr))\n          (let [text (StringBuilder.)\n                pbr (proxy [PushbackReader] [rdr]\n                      (read [] (let [i (proxy-super read)]\n                                 (.append text (char i))\n                                 i)))]\n            (read (PushbackReader. pbr))\n            (str text)))))))", :ns "clojure.repl", :name "source-fn", :arglists ([x]), :column 1, :doc "Returns a string of the source code for the given symbol, if it can\n  find it.  This requires that the symbol resolve to a Var defined in\n  a namespace for which the .clj is in the classpath.  Returns nil if\n  it can't find the source.  For most REPL usage, 'source' is more\n  convenient.\n\n  Example: (source-fn 'filter)", :line 134, :file "clojure/repl.clj"}