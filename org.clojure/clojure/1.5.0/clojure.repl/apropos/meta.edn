{:type :fn, :src "(defn apropos\n  \"Given a regular expression or stringable thing, return a seq of\nall definitions in all currently-loaded namespaces that match the\nstr-or-pattern.\"\n  [str-or-pattern]\n  (let [matches? (if (instance? java.util.regex.Pattern str-or-pattern)\n                   #(re-find str-or-pattern (str %))\n                   #(.contains (str %) (str str-or-pattern)))]\n    (mapcat (fn [ns]\n              (filter matches? (keys (ns-publics ns))))\n            (all-ns))))", :ns "clojure.repl", :name "apropos", :arglists ([str-or-pattern]), :column 1, :doc "Given a regular expression or stringable thing, return a seq of\nall definitions in all currently-loaded namespaces that match the\nstr-or-pattern.", :line 165, :file "clojure/repl.clj"}