{:arglists ([] [x] [x y] [x y & zs]), :ns "clojure.core", :name "concat", :src "(defn concat\n  \"Returns a lazy seq representing the concatenation of the elements in the supplied colls.\"\n  {:added \"1.0\"\n   :static true}\n  ([] (lazy-seq nil))\n  ([x] (lazy-seq x))\n  ([x y]\n    (lazy-seq\n      (let [s (seq x)]\n        (if s\n          (if (chunked-seq? s)\n            (chunk-cons (chunk-first s) (concat (chunk-rest s) y))\n            (cons (first s) (concat (rest s) y)))\n          y))))\n  ([x y & zs]\n     (let [cat (fn cat [xys zs]\n                 (lazy-seq\n                   (let [xys (seq xys)]\n                     (if xys\n                       (if (chunked-seq? xys)\n                         (chunk-cons (chunk-first xys)\n                                     (cat (chunk-rest xys) zs))\n                         (cons (first xys) (cat (rest xys) zs)))\n                       (when zs\n                         (cat (first zs) (next zs)))))))]\n       (cat (concat x y) zs))))", :column 1, :added "1.0", :static true, :type :fn, :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :line 670, :file "clojure/core.clj"}