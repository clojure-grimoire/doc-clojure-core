{:arglists ([& bases]), :ns "clojure.core", :name "get-proxy-class", :src "(defn get-proxy-class \n  \"Takes an optional single class followed by zero or more\n  interfaces. If not supplied class defaults to Object.  Creates an\n  returns an instance of a proxy class derived from the supplied\n  classes. The resulting value is cached and used for any subsequent\n  requests for the same class set. Returns a Class object.\"\n  {:added \"1.0\"}\n  [& bases]\n    (let [[super interfaces] (get-super-and-interfaces bases)\n          pname (proxy-name super interfaces)]\n      (or (RT/loadClassForName pname)\n          (let [[cname bytecode] (generate-proxy super interfaces)]\n            (. ^DynamicClassLoader (deref clojure.lang.Compiler/LOADER) (defineClass pname bytecode [super interfaces]))))))", :column 1, :added "1.0", :type :fn, :doc "Takes an optional single class followed by zero or more\n  interfaces. If not supplied class defaults to Object.  Creates an\n  returns an instance of a proxy class derived from the supplied\n  classes. The resulting value is cached and used for any subsequent\n  requests for the same class set. Returns a Class object.", :line 250, :file "clojure/core_proxy.clj"}