{:arglists ([expr name & forms]), :ns "clojure.core", :name "as->", :src "(defmacro as->\n  \"Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.\"\n  {:added \"1.5\"}\n  [expr name & forms]\n  `(let [~name ~expr\n         ~@(interleave (repeat name) forms)]\n     ~name))", :column 1, :added "1.5", :type :macro, :doc "Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.", :macro true, :line 6803, :file "clojure/core.clj"}