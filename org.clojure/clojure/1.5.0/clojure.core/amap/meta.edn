{:arglists ([a idx ret expr]), :ns "clojure.core", :name "amap", :src "(defmacro amap\n  \"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting \n  each element of ret to the evaluation of expr, returning the new \n  array ret.\"\n  {:added \"1.0\"}\n  [a idx ret expr]\n  `(let [a# ~a\n         ~ret (aclone a#)]\n     (loop  [~idx 0]\n       (if (< ~idx  (alength a#))\n         (do\n           (aset ~ret ~idx ~expr)\n           (recur (unchecked-inc ~idx)))\n         ~ret))))", :column 1, :added "1.0", :type :macro, :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting \n  each element of ret to the evaluation of expr, returning the new \n  array ret.", :macro true, :line 4693, :file "clojure/core.clj"}