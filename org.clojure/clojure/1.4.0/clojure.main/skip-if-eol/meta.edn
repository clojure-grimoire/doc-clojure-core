{:type :fn, :src "(defn skip-if-eol\n  \"If the next character on stream s is a newline, skips it, otherwise\n  leaves the stream untouched. Returns :line-start, :stream-end, or :body\n  to indicate the relative location of the next character on s. The stream\n  must either be an instance of LineNumberingPushbackReader or duplicate\n  its behavior of both supporting .unread and collapsing all of CR, LF, and\n  CRLF to a single \\\\newline.\"\n  [s]\n  (let [c (.read s)]\n    (cond\n     (= c (int \\newline)) :line-start\n     (= c -1) :stream-end\n     :else (do (.unread s c) :body))))", :ns "clojure.main", :name "skip-if-eol", :arglists ([s]), :doc "If the next character on stream s is a newline, skips it, otherwise\n  leaves the stream untouched. Returns :line-start, :stream-end, or :body\n  to indicate the relative location of the next character on s. The stream\n  must either be an instance of LineNumberingPushbackReader or duplicate\n  its behavior of both supporting .unread and collapsing all of CR, LF, and\n  CRLF to a single \\newline.", :line 113, :file "clojure/main.clj"}