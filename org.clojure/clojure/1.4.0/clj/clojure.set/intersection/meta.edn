{:type :fn, :src "(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  {:added \"1.0\"}\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))", :ns "clojure.set", :name "intersection", :arglists ([s1] [s1 s2] [s1 s2 & sets]), :added "1.0", :doc "Return a set that is the intersection of the input sets", :line 32, :file "clojure/set.clj"}