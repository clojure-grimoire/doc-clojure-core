{:arglists ([] [end] [start end] [start end step]), :ns "clojure.core", :name "range", :src "(defn range \n  \"Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end\n  to infinity.\"\n  {:added \"1.0\"\n   :static true}\n  ([] (range 0 Double/POSITIVE_INFINITY 1))\n  ([end] (range 0 end 1))\n  ([start end] (range start end 1))\n  ([start end step]\n   (lazy-seq\n    (let [b (chunk-buffer 32)\n          comp (if (pos? step) < >)]\n      (loop [i start]\n        (if (and (< (count b) 32)\n                 (comp i end))\n          (do\n            (chunk-append b i)\n            (recur (+ i step)))\n          (chunk-cons (chunk b) \n                      (when (comp i end) \n                        (range i end step)))))))))", :added "1.0", :static true, :type :fn, :doc "Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end\n  to infinity.", :line 2600, :file "clojure/core.clj"}