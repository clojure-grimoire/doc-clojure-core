{:arglists ([& body]), :ns "clojure.core", :name "future", :src "(defmacro future\n  \"Takes a body of expressions and yields a future object that will\n  invoke the body in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant of\n  deref with timeout is used. See also - realized?.\"\n  {:added \"1.1\"}\n  [& body] `(future-call (^{:once true} fn* [] ~@body)))", :added "1.1", :type :macro, :doc "Takes a body of expressions and yields a future object that will\n  invoke the body in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant of\n  deref with timeout is used. See also - realized?.", :macro true, :line 6172, :file "clojure/core.clj"}