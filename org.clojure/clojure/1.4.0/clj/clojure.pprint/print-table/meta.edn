{:type :fn, :src "(defn print-table\n  \"Alpha - subject to change.\n   Prints a collection of maps in a textual table. Prints table headings\n   ks, and then a line of output for each row, corresponding to the keys\n   in ks. If ks are not specified, use the keys of the first item in rows.\"\n  {:added \"1.3\"}\n  ([ks rows]\n     (when (seq rows)\n       (let [widths (map\n                     (fn [k]\n                       (apply max (count (str k)) (map #(count (str (get % k))) rows)))\n                     ks)\n             fmts (map #(str \"%-\" % \"s\") widths)\n             fmt-row (fn [row]\n                       (apply str (interpose \" | \"\n                                             (for [[col fmt] (map vector (map #(get row %) ks) fmts)]\n                                               (format fmt (str col))))))\n             header (fmt-row (zipmap ks ks))\n             bar (apply str (repeat (count header) \"=\"))]\n         (println bar)\n         (println header)\n         (println bar)\n         (doseq [row rows]\n           (println (fmt-row row)))\n         (println bar))))\n  ([rows] (print-table (keys (first rows)) rows)))", :ns "clojure.pprint", :name "print-table", :arglists ([ks rows] [rows]), :added "1.3", :doc "Alpha - subject to change.\n   Prints a collection of maps in a textual table. Prints table headings\n   ks, and then a line of output for each row, corresponding to the keys\n   in ks. If ks are not specified, use the keys of the first item in rows.", :line 11, :file "clojure/pprint/print_table.clj"}