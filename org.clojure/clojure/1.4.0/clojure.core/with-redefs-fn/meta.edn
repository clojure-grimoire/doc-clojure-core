{:type :fn, :src "(defn with-redefs-fn\n  \"Temporarily redefines Vars during a call to func.  Each val of\n  binding-map will replace the root value of its key which must be\n  a Var.  After func is called with no args, the root values of all\n  the Vars will be set back to their old values.  These temporary\n  changes will be visible in all threads.  Useful for mocking out\n  functions during testing.\"\n  {:added \"1.3\"}\n  [binding-map func]\n  (let [root-bind (fn [m]\n                    (doseq [[a-var a-val] m]\n                      (.bindRoot ^clojure.lang.Var a-var a-val)))\n        old-vals (zipmap (keys binding-map)\n                         (map deref (keys binding-map)))]\n    (try\n      (root-bind binding-map)\n      (func)\n      (finally\n        (root-bind old-vals)))))", :ns "clojure.core", :name "with-redefs-fn", :arglists ([binding-map func]), :added "1.3", :doc "Temporarily redefines Vars during a call to func.  Each val of\n  binding-map will replace the root value of its key which must be\n  a Var.  After func is called with no args, the root values of all\n  the Vars will be set back to their old values.  These temporary\n  changes will be visible in all threads.  Useful for mocking out\n  functions during testing.", :line 6569, :file "clojure/core.clj"}