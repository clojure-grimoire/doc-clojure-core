{:arglists ([timeout-ms & agents]), :ns "clojure.core", :name "await-for", :src "(defn await-for\n  \"Blocks the current thread until all actions dispatched thus\n  far (from this thread or agent) to the agents have occurred, or the\n  timeout (in milliseconds) has elapsed. Returns logical false if\n  returning due to timeout, logical true otherwise.\"\n  {:added \"1.0\"\n   :static true}\n  [timeout-ms & agents]\n    (io! \"await-for in transaction\"\n     (when *agent*\n       (throw (new Exception \"Can't await in agent action\")))\n     (let [latch (new java.util.concurrent.CountDownLatch (count agents))\n           count-down (fn [agent] (. latch (countDown)) agent)]\n       (doseq [agent agents]\n           (send agent count-down))\n       (. latch (await  timeout-ms (. java.util.concurrent.TimeUnit MILLISECONDS))))))", :added "1.0", :static true, :type :fn, :doc "Blocks the current thread until all actions dispatched thus\n  far (from this thread or agent) to the agents have occurred, or the\n  timeout (in milliseconds) has elapsed. Returns logical false if\n  returning due to timeout, logical true otherwise.", :line 2879, :file "clojure/core.clj"}