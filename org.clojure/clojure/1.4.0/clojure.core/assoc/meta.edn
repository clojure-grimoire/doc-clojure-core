{:arglists ([map key val] [map key val & kvs]), :ns "clojure.core", :name "assoc", :src "(def\n ^{:arglists '([map key val] [map key val & kvs])\n   :doc \"assoc[iate]. When applied to a map, returns a new map of the\n    same (hashed/sorted) type, that contains the mapping of key(s) to\n    val(s). When applied to a vector, returns a new vector that\n    contains val at index. Note - index must be <= (count vector).\"\n   :added \"1.0\"\n   :static true}\n assoc\n (fn ^:static assoc\n   ([map key val] (. clojure.lang.RT (assoc map key val)))\n   ([map key val & kvs]\n    (let [ret (assoc map key val)]\n      (if kvs\n        (recur ret (first kvs) (second kvs) (nnext kvs))\n        ret)))))", :added "1.0", :static true, :type :fn, :doc "assoc[iate]. When applied to a map, returns a new map of the\n    same (hashed/sorted) type, that contains the mapping of key(s) to\n    val(s). When applied to a vector, returns a new vector that\n    contains val at index. Note - index must be <= (count vector).", :line 177, :file "clojure/core.clj"}