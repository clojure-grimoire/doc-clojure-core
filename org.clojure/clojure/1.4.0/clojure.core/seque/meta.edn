{:arglists ([s] [n-or-q s]), :ns "clojure.core", :name "seque", :src "(defn seque\n  \"Creates a queued seq on another (presumably lazy) seq s. The queued\n  seq will produce a concrete seq in the background, and can get up to\n  n items ahead of the consumer. n-or-q can be an integer n buffer\n  size, or an instance of java.util.concurrent BlockingQueue. Note\n  that reading from a seque can block if the reader gets ahead of the\n  producer.\"\n  {:added \"1.0\"\n   :static true}\n  ([s] (seque 100 s))\n  ([n-or-q s]\n   (let [^BlockingQueue q (if (instance? BlockingQueue n-or-q)\n                             n-or-q\n                             (LinkedBlockingQueue. (int n-or-q)))\n         NIL (Object.) ;nil sentinel since LBQ doesn't support nils\n         agt (agent (seq s))\n         fill (fn [s]\n                (try\n                  (loop [[x & xs :as s] s]\n                    (if s\n                      (if (.offer q (if (nil? x) NIL x))\n                        (recur xs)\n                        s)\n                      (.put q q))) ; q itself is eos sentinel\n                  (catch Exception e\n                    (.put q q)\n                    (throw e))))\n         drain (fn drain []\n                 (lazy-seq\n                  (let [x (.take q)]\n                    (if (identical? x q) ;q itself is eos sentinel\n                      (do @agt nil)  ;touch agent just to propagate errors\n                      (do\n                        (send-off agt fill)\n                        (cons (if (identical? x NIL) nil x) (drain)))))))]\n     (send-off agt fill)\n     (drain))))", :added "1.0", :static true, :type :fn, :doc "Creates a queued seq on another (presumably lazy) seq s. The queued\n  seq will produce a concrete seq in the background, and can get up to\n  n items ahead of the consumer. n-or-q can be an integer n buffer\n  size, or an instance of java.util.concurrent BlockingQueue. Note\n  that reading from a seque can block if the reader gets ahead of the\n  producer.", :line 4734, :file "clojure/core.clj"}